/*
 * ************************************************************
 * 文件：config-aar.gradle  模块：ElegantBus  项目：ElegantBus
 * 当前修改时间：2022年09月12日 18:50:52
 * 上次修改时间：2022年09月12日 18:50:48
 * 作者：Cody.yi   https://github.com/codyer
 *
 * 描述：ElegantBus
 * Copyright (c) 2022
 * ************************************************************
 */

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

android {
    compileSdk rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdk rootProject.ext.minSdkVersion
        targetSdk rootProject.ext.targetSdkVersion
        consumerProguardFiles "consumer-rules.pro"
        manifestPlaceholders = [
                "@BUS_SUPPORT_MULTI_APP"  : "false",
                "@BUS_MAIN_APPLICATION_ID": ""
        ]
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    publishing {
        singleVariant("release") {
            // if you don't want sources/javadoc, remove these lines
            if (!SIMPLIFY_VERSION) {
                withSourcesJar()
                withJavadocJar()
            }
        }
    }
}

afterEvaluate {
    tasks.findAll { task ->
        if (task.name.contains("verify")) {
            task.enabled = false;
        }
    }
    publishing {
        publications {
            def flavors = android.productFlavors
            if (flavors == null || flavors.size() == 0) {
                println("++++++++++ componentNameList : " + components*.name)
                // Creates a Maven publication called "release".
                release(MavenPublication) {
                    from components.release
                    groupId = rootProject.ext.groupId
                    artifactId = project.getName()
                    version = rootProject.ext.version
                }
            } else {
                flavors.forEach { flavor ->
                    println("++++++++++ productFlavors : " + flavor.name)
                    "$flavor.name"(MavenPublication) {
//                        from components."${flavor.name}Release"
                        groupId = rootProject.ext.groupId
                        artifactId = project.getName() + "-$flavor.name"
                        artifact tasks.findByName("bundle${flavor.name.capitalize()}ReleaseAar")
                        version = rootProject.ext.version
                        pom.withXml {
                            def dependenciesNode = asNode().appendNode('dependencies')
                            // Iterate over the api dependencies (we don't want the test ones), adding a <dependency> node for each
                            configurations.api.allDependencies.each {
                                println("++++++++++ AAA it : " + it.version)
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                if (it.version == "unspecified") {
                                    dependencyNode.appendNode('groupId', rootProject.ext.groupId)
                                    dependencyNode.appendNode('artifactId', it.name)
                                    dependencyNode.appendNode('version', rootProject.ext.version)
                                } else {
                                    dependencyNode.appendNode('groupId', it.group)
                                    dependencyNode.appendNode('artifactId', it.name)
                                    dependencyNode.appendNode('version', it.version)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}